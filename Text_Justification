class Solution {
  public:
    string leftJustify(vector < string > & words, int maxWidth, vector < int > w, int sum) {
      string s;
      for (int i = 0; i < w.size(); i++) {
        s.append(words[w[i]]);
        if (s.size() < maxWidth)
          s.append(" ");
      }
      string s1(maxWidth - s.size(), ' ');
      s.append(s1);
      return s;
    }

  string makeString(vector < string > & words, int maxWidth, vector < int > w, int sum) {
    if (w.empty()) {
      return "";
    }
    sum = sum - w.size();
    
    int space = (maxWidth - sum);
    int n = w.size() - 1;
    string s;
    if (n) {
      int l = space / n;
      s.append(words[w[0]]);
      if (space % n == 0) {
        string str(l, ' ');
        for (int i = 0; i < n; i++) {
          s.append(str);
          s.append(words[w[i + 1]]);
        }
      } else {
        int zp = (space % n);
        int pp = space / n;
        string str1(pp + 1, ' ');
        string str2(pp, ' ');
        for (int i = 0; i < n; i++) {

          if ((i < zp)) {
            s.append(str1);
            s.append(words[w[i + 1]]);
          } else {
            s.append(str2);
            s.append(words[w[i + 1]]);
          }
        }
      }
    } else {
      s.append(words[w[0]]);
      if (s.size() < maxWidth) {
        string s1(maxWidth - s.size(), ' ');
        s.append(s1);
      }
    }

    return s;

  }

  vector < string > fullJustify(vector < string > & words, int maxWidth) {
    vector < string > res;
    vector < vector < int >> word;
    int sum = 0;
    vector < int > tvec;

    for (int i = 0; i < words.size(); i++) {
      int temp = words[i].size();

      if ((sum + temp) > maxWidth) {
        string s = makeString(words, maxWidth, tvec, sum);
        res.push_back(s);
        tvec.erase(tvec.begin(), tvec.end());
        sum = 0;
      }
      tvec.push_back(i);
      sum += words[i].size();
      sum++;
    }
    string s = leftJustify(words, maxWidth, tvec, sum);
    res.push_back(s);

    return res;
  }
};
